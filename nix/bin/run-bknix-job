#!/usr/bin/env bash
{ ## start: run-bknix-job

RUN_BKNIX_HOMER_IMAGES="$HOME/images"
RUN_BKNIX_CLEANUP_FILES=()
RUN_BKNIX_CLEANUP_FUNCS=()
trap run_bknix_cleanup EXIT

function run_bknix_help() {
  echo "usage: run-bknix-job [--mock] [<RUN_MODE>] [<PROFILE> [<JOB_NAME>]]"
  echo
  echo "example: run-bknix-job --isolate"
  echo "example: run-bknix-job --active min shell"
  echo "example: run-bknix-job --autostart php74m80 CiviRM-Core-Matrix"
  echo
  echo "The <RUN_MODE> determines how to access PHP/MySQL/etc. It is one of:"
  echo "  --active: Use an active, pre-installed copy of the nix profile"
  echo "  --isolate: Create an isolated container (homerdo; Linux-only)"
  echo "  --autostart: Start everything (nix-shell, PHP, MySQL) as current user"
  echo "  --autostart-services: As above, but only start PHP/MySQL"
  echo
  echo "tip: If <JOB_NAME> is omitted, and if you execute within a real Jenkins"
  echo "environment, then it will use the active \$JOB_NAME."
  echo ""
  echo "tip: If <JOB_NAME> is an HTTPS URL, then it will fetch and run the"
  echo "script. This is useful if you want to configure Jenkins to temporarily"
  echo "use a WIP script."
}

function run_bknix_fatal() {
  echo "$@" 1>&2
  echo 1>&2
  run_bknix_help 1>&2
  exit 1
}

function run_bknix_mktemp() {
  local tmpfile="/tmp/run-bknix-$USER-"$(date '+%Y-%m-%d-%H-%M'-$RANDOM$RANDOM)
  touch "$tmpfile"
  chmod 600 "$tmpfile"
  echo "$tmpfile"
}

function run_bknix_cleanup() {
  for func in "${RUN_BKNIX_CLEANUP_FUNCS[@]}" ; do
    #echo >&2 "[run-bknix-job: cleanup] $func"
    $func
  done
  for file in "${RUN_BKNIX_CLEANUP_FILES[@]}" ; do
    #echo >&2 "[run-bknix-job: cleanup] $file"
    if [ -e "$file" ]; then
      rm -f "$file"
    fi
  done
}

function run_bknix_main() {
  if [ -z "$BKNIX_JOBS" ]; then
    BKNIX_JOBS="/opt/buildkit/src/jobs"
  fi
  if [ ! -r "$BKNIX_JOBS/common.sh" ]; then
    run_bknix_fatal "File $BKNIX_JOBS/common.sh is not readable."
  fi
  export BKNIX_JOBS

  if [ -z "$BKIT" ]; then
    BKIT=$(cd "$BKNIX_JOBS/../.." && pwd)
  fi

  IS_MOCK_JENKINS=
  RUN_MODE=
  while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
      --help|-h) run_bknix_help ; exit 0 ; ;;
      --mock) IS_MOCK_JENKINS=1 ; shift ; ;;
      --isolate) RUN_MODE=isolate ; shift ; ;;
      --autostart) RUN_MODE=autostart ; shift ; ;;
      --autostart-services) RUN_MODE=autostart-services ; shift ; ;;
      --active) RUN_MODE=active ; shift ; ;;
      *)
        break
        ;;
    esac
  done

  if [ -n "$1" -a "${1:0:1}" != "-" ]; then
    export BKPROF="$1"
    shift
  fi
  if [ -n "$1" -a "${1:0:1}" != "-" ]; then
    export JOB_NAME="$1"
    shift
  fi
  if [ $# -gt 1 -o -z "$BKPROF" -o -z "$JOB_NAME" ]; then
    run_bknix_help
    exit 1
  fi
  if [ -z "$RUN_MODE" ]; then
    ## Fallback to old behavior
    if [ -e /etc/bknix-ci/is-runner -a "$USER" != "homer" ]; then
      RUN_MODE=isolate
    else
      RUN_MODE=active
    fi
  fi

  source "$BKNIX_JOBS/common.sh"
  assert_common BKPROF JOB_NAME

  if [ -n "$IS_MOCK_JENKINS" ]; then
    init_jenkins_mock
  fi

  if [ -d "$WORKSPACE/build" ]; then
    rm -rf "$WORKSPACE/build"
  fi

  case "$RUN_MODE" in
    isolate)
      ## Create a container in image $RUN_BKNIX_HOMER_IMAGES/bknix-$BKPROF-$N.img
      assert_common BKPROF
      "$BKNIX_JOBS/homerdo-runjob.sh" all
      return
      ;;
    autostart)
      ## Start a nix-shell to get PHP+MySQL binaries. Then start the services.
      assert_common BKPROF
      ( cd "$BKIT" && nix-shell -A "$BKPROF" --run 'cd "$WORKSPACE" && run-bknix-job --autostart-services' )
      return
      ;;
    autostart-services)
      ## Use current PHP+MySQL binaries. Start the services.
      assert_common BKPROF BKITBLD LOCO_PRJ BKIT
      LOADED_BKPROF="$BKPROF"
      (cd "$LOCO_PRJ" && loco clean)
      if (cd "$LOCO_PRJ" && loco sh . -- .loco/bin/loco-check-ports); then
        true
      else
        echo >&2 "Port check failed. Is this a zombie attack?"
        exit 1
      fi
      (cd "$LOCO_PRJ" && loco start)
      RUN_BKNIX_CLEANUP_FUNCS+=('run_bknix_stop_loco')

      ## Pin the version of run-job to match the version of run-bknix-job.
      ## This resolves edge-case where we're writing/evaluating changes to {run-job,run-bknix-job}.
      ## The local copy will take precedence over the (non-existent/older) copy on Github.
      "$BKNIX_JOBS/../../bin/run-job"
      ;;
    active)
      ## Use the pre-installed nix profile.
      use-bknix "$BKPROF" -cr bash -c 'cd "$WORKSPACE" && run-job'
      ;;
    *)
      run_bknix_fatal "Unrecognized run mode ($RUN_MODE). Please specify one of: --isolate | --autostart | --autostart-services | --active"
      ;;
  esac
}

function run_bknix_stop_loco() {
  (cd "$LOCO_PRJ" && loco stop)
}

run_bknix_main "$@"

} ## end: run-bknix-job
